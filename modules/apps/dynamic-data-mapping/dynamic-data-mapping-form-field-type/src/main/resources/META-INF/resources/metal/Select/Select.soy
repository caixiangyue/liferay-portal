{namespace Select}

{template .render}
	{@param? _handleClick: any}
	{@param? _handleItemClicked: any}
	{@param? fixedOptions: list<[
		checked: bool,
		disabled: bool,
		id: string,
		inline: bool,
		label: string,
		name: string,
		showLabel: bool,
		value: string
	]>}
	{@param? id: string}
	{@param? label: string}
	{@param? open: bool}
	{@param? options: list<[
		checked: bool,
		disabled: bool,
		id: string,
		inline: bool,
		label: string,
		name: string,
		showLabel: bool,
		value: string
	]>}
	{@param? placeholder: string}
	{@param? predefinedValue: string}
	{@param? readOnly: bool}
	{@param? required: bool}
	{@param? selectedLabel: string}
	{@param? showLabel: bool}
	{@param? spritemap: string}
	{@param? tip: string}
	{@param? value: string}

	{call FieldBase.render}
		{param contentRenderer kind="html"}
			{call .content}
				{param _handleClick: $_handleClick /}
				{param _handleItemClicked: $_handleItemClicked /}
				{param fixedOptions: $fixedOptions /}
				{param id: $id /}
				{param open: $open /}
				{param options: $options /}
				{param placeholder: $placeholder /}
				{param predefinedValue: $predefinedValue /}
				{param readOnly: $readOnly /}
				{param selectedLabel: $selectedLabel /}
				{param spritemap: $spritemap /}
				{param value: $value /}
			{/call}
		{/param}

		{param id: $id /}
		{param label: $label /}
		{param required: $required /}
		{param showLabel: $showLabel /}
		{param spritemap: $spritemap /}
		{param tip: $tip /}
	{/call}
{/template}

{template .content}
	{@param? _handleItemClicked: any}
	{@param? _handleClick: any}
	{@param? fixedOptions: list<[
		checked: bool,
		disabled: bool,
		id: string,
		inline: bool,
		label: string,
		name: string,
		showLabel: bool,
		value: string
	]>}
	{@param? id: string}
	{@param? open: bool}
	{@param? options: list<[
		checked: bool,
		disabled: bool,
		id: string,
		inline: bool,
		label: string,
		name: string,
		showLabel: bool,
		value: string
	]>}
	{@param? placeholder: string}
	{@param? readOnly: bool}
	{@param? selectedLabel: string}
	{@param? spritemap: string}

	<div class="form-builder-select-field input-group-container">
		{let $attributes kind="attributes"}
			class="form-control select-field-trigger"

			{if $id}
				id="{$id}"
			{/if}

			{if $readOnly}
				disabled
			{/if}

			data-onclick="{$_handleClick}"
		{/let}

		<div {$attributes}>
			<div class="option-selected option-selected-placeholder">{$selectedLabel ? $selectedLabel : $placeholder}</div>
			<a class="select-arrow-down-container" href="javascript:;">
				{if $spritemap}
					{call ClayIcon.render}
						{param spritemap: $spritemap /}
						{param symbol: 'caret-double' /}
					{/call}
				{/if}
			</a>
		</div>
	</div>

	{call .listItems}
		{param _handleItemClicked: $_handleItemClicked /}
		{param fixedOptions: $fixedOptions /}
		{param open: $open /}
		{param options: $options /}
		{param placeholder: $placeholder /}
	{/call}
{/template}

{template .listItems}
	{@param? _handleItemClicked: any}
	{@param? fixedOptions: list<[
		checked: bool,
		disabled: bool,
		id: string,
		inline: bool,
		label: string,
		name: string,
		showLabel: bool,
		value: string
	]>}
	{@param? open: bool}
	{@param? options: list<[
		checked: bool,
		disabled: bool,
		id: string,
		inline: bool,
		label: string,
		name: string,
		showLabel: bool,
		value: string
	]>}
	{@param? placeholder: string}

	{let $attributes kind="attributes"}
		class="dropdown-menu

		{if $open}
			{sp}dropdown-opened
		{/if}
		"
		data-onclick="{$_handleItemClicked}"

	{/let}

	{if $options}
		<div {$attributes}>
			<ul class="list-unstyled">
				<li class="dropdown-item" data-option-value="">{$placeholder}</li>
				{if length($options) > 0}
					{foreach $option in $options}
						<li class="dropdown-item" data-option-value="{$option.value}">{$option.label}</li>
					{/foreach}
				{/if}
				{if $fixedOptions and length($fixedOptions) > 0}
					<li class="dropdown-divider"></li>
					{foreach $fixedOption in $fixedOptions}
						<li class="dropdown-item"  data-option-value="{$fixedOption.value}">{$fixedOption.label}</li>
					{/foreach}
				{/if}
			</ul>
		</div>
	{/if}
{/template}